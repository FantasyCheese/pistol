[m[34;47m 作者 [37;44m piaip ()                                               [34;47m 看板 [37;44m BBSmovie [m
[m[34;47m 標題 [37;44m pmore 2007 互動式動畫系統技術手冊                                      [m
[m[34;47m 時間 [37;44m Sun Dec  9 11:05:22 2007                                               [m
[m[36m───────────────────────────────────────[m
[m
[m
[m=============================================================================
[m
[m        pmore 2007 互動式動畫系統技術手冊
[m
[m        VERSION 1.4
[m        最後更新: 2008/03/02 16:00
[m
[m        本文為推廣用說明文件 歡迎自由轉錄
[m        不需另行通知作者
[m
[m=============================================================================
[m
[m0. 序
[m
[m        2005 年的夏天，一個劃時代的 BBS 文章瀏覽程式 pmore 誕生了。
[m        它所內建的簡易文字動畫播放功能，更是讓在 BBS 上觀看文字動畫
[m        成為全新的體驗。  雖然原始的 pmore 動畫只是單純的時間軸系統，
[m        但在眾家高手的巧思下也有不少實驗性互動作品的出現 (見 PTT
[m        BBSMovie 板)；創意十足，只可惜受限於舊系統，操作上總是不太方便，
[m        問題也很多。
[m
[m        2007 年冬，根據這兩年來所收集到的成果與意見， pmore 的動畫系統
[m        進行了一連串的改進與新增，加進了大量的播放控制與互動能力。
[m        迷宮、RPG、太鼓達人、多重結局動畫，這些都不再是夢想。
[m
[m
[m        這篇文件是寫給有志利用新系統[1m「製作」[m動畫的，
[m        所以裡面會有不少技術性的東西；請多多諒解。
[m        如果你只是喜歡「看」動畫，後面講的東西不需要懂、直接左鍵跳出
[m        也是完全沒問題的！
[m
[m
[m        本文定位是技術手冊而非動畫入門，假設你已對文字形動畫有一定程度的
[m        理解、最好自己作個簡單的作品、也大概見過 pmore 傳統動畫。
[m        如果你是剛接觸 ASCII Art 的新手，建議你先觀摩一下其它高手前輩的作品
[m        (ex, AsciiArt, BBSMovie) 可能會更容易理解這篇在談的東西。
[m
[m        PS: 由於 2007 新增的內容實在太多，這次的技術手冊本身不使用動畫格式寫
[m        不過有另一篇「pmore 2007 互動功能簡介」
[m        本身就是用新互動語法寫成的介紹，可以方便你體驗互動式的樂趣。
[m
[m=============================================================================
[m
[m1. 一般動畫
[m
[m        除了加入少量控制指令，傳統動畫部份沒有什麼大改變，
[m        不過為了方便後面說明，還是重新簡單介紹一下吧：
[m
[m        先來定義一些名詞
[m
[m        [1mFrame                畫面[m
[m
[m        一個動畫，其實就是一連串的畫面，在連續的時間內交換顯示。
[m        BBS 的文字動畫本質上也是如此。 我們把每次顯示、使用者所看
[m        到的單頁稱之為一個畫面 (英文為 Frame)。
[m        這份文件有時也會用「頁」來描述。
[m
[m        [1mEscape Code         控制碼[m
[m
[m        由於我們的動畫是用純文字寫成的，所以要一些特別的符號
[m        來指示系統該怎麼處理播放時間的變化，或是畫面的開始。
[m        這種東西被通稱為控制碼。  pmore 的控制碼是寫成 ^L
[m        注意這是分別打入「^」 (Shift-6) 與大寫「L」兩個符號的結果。
[m        在 BBS 的編輯器中壓著 Ctrl 再按 L 只會重新顯示，不會
[m        跑出這個符號。
[m
[m        註: 在 PTT 新版的編輯器中，當你正確的打入 ^L 後該行
[m        會變色。 如果沒有變色，代表你的輸入方式有誤。
[m
[m        註: 對於許多人問「按 Ctrl 再按 L 沒反應」這點深感抱歉，實際上
[m        pmore 真的接受 Ctrl-L 為控制碼，只是大部份的 BBS 編輯器按
[m        Ctrl-L 都是重繪螢幕指令而非輸入 Ctrl-L，所以現在都以輸入
[m        Shift-6 (^) 再按 L 比較方便。
[m
[m        [1mTime (Duration)     播放時間[m
[m
[m        每張畫面從出現到消失(被下張取代)的時間就是所謂的播放時間。
[m        在 pmore 的系統中，這個時間是有下限的: 最短不能少於 0.1 秒。
[m        這個數字是參考到網路延遲、系統效能、還有使用者反應時間所
[m        定出來的。
[m
[m        [1mTimeline            時間軸[m
[m
[m        整個動畫在播放時的時間與順序變化可稱之為時間軸系統。
[m        傳統 BBS 動畫等於沒有時間軸，完全靠使用者手動翻頁。
[m        pmore 動畫的時間軸是靠指令設定的。
[m
[m-----------------------------------------------------------------------------
[m
[m1.1 畫面開始
[m
[m        ^L
[m
[m        FRAME START     畫面開始
[m
[m        pmore 動畫的每張畫面，都是從以 ^L 開頭的一行開始的。
[m        這行不會顯示在螢幕上，而且螢幕只會顯示到下個 ^L 出現的那行。
[m
[m        所以你可以不用在意每張畫面有沒有對齊 22 行，
[m        也可以一路畫到第 23 行。
[m
[m        另外每個 ^L 後面可以帶一個時間參數，單位為秒。
[m        若沒寫時間，則此畫面的播放時間與上一張相同。
[m        最開始預設的時間是 1 秒。
[m
[m        範例:
[m                ^L      (播放 1.0 秒)
[m                ^L0.5   (播放 0.5 秒)
[m                ^L      (與上張同 - 播放 0.5 秒)
[m                ^L10    (播放 10  秒)
[m                ^L0     (少於最短播放時間的一律會變為 0.1 秒)
[m
[m        註: 每個 ^L 一定要對齊該行開頭。
[m            另外，由於系統效能考量，第一個 ^L 一定要出現在文章開始顯示的
[m            第一頁範圍內，否則不會被視為動畫檔。
[m            在 BBS 編輯器中觀看時，它的前面應該沒有任何空白，
[m            也沒有 ANSI 控制碼 (某些特殊碼例外)
[m            詳情見參見 1.5 隱藏控制碼
[m
[m-----------------------------------------------------------------------------
[m
[m1.2 基本播放控制: 暫停  (2007 新增)
[m
[m        ^LP
[m
[m        PAUSE           暫停播放
[m
[m        以往想讓使用者看仔細一點的畫面，
[m        常常有人寫成  ^L99999
[m        然後畫面指示「看完請看任意鍵後再按 p (繼續播放)」
[m        秒數寫少看不清楚，寫太多操作又複雜
[m
[m        ^LP 就是為了解決這個問題而誕生的。
[m        ^LP 會讓該頁提示使用者按下任意鍵後再繼續。
[m
[m        範例:
[m                ^LP
[m
[m-----------------------------------------------------------------------------
[m
[m1.3 基本播放控制: 停止  (2007 新增)
[m
[m        ^LE
[m
[m        END             結束播放
[m
[m        舊版 pmore 動畫結束後會一路跳到文章最底下
[m        很難在文章結尾放些說明文字或感言
[m        所以也有人常在想結束的地方寫 ^L99999
[m
[m        現在不用這麼麻煩了，
[m        ^LE 會直接在該頁停下來。
[m
[m        範例:
[m                ^LE
[m
[m-----------------------------------------------------------------------------
[m
[m1.4 時間同步
[m
[m        ^LS
[m
[m        SYNC            同步播放
[m
[m        這是為 KTV 系列動畫而生的指令。 此類需要與現實世界對時
[m        (電腦一面播歌，一面放動畫) 的動畫會受到網路的影響使得
[m        動畫產生延遲，播久一點後畫面跟聲音就對不起來了。
[m
[m        ^LS 會使時間計算忽略網路延遲，不過實際播放效果仍可能
[m        受到網路影響，端看使用者的網路連線品質有多好。
[m
[m        範例:
[m
[m                ^LS0.8          (此頁會不計網路延遲的播放 0.8 秒)
[m
[m        註:     非同步播放的計時是由「本張畫面顯示完」開始計時，每張獨立；
[m                同步播放的計時則是由「上張畫面顯示完」開始，每張相關。
[m
[m
[m                ^L0.5 跟 ^LS0.5 的差別用圖來解說: (若延遲 0.1s)
[m
[m        時間軸: 0       0.5   0.6      1.0   1.1   1.2
[m                |--------|-----|--------|-----|-----|------->
[m     ^L 非同步: |<-0.5s->|<0.1>|<----0.5----->|<0.1>|<--0.5-->
[m                   畫面1            畫面2             畫面3
[m     ^LS  同步: |<-0.5s->|<0.1>|<--0.4->|<0.1>|<---0.4--->
[m                  畫面1          畫面2          畫面3
[m
[m                由上圖可得知， ^LS 可以讓設計者直接對時，不需要考慮延遲時間。
[m
[m        如果你還是不懂 ^LS 在幹麼，沒關係...
[m        ^LS 跟互動式無關，使用上也不用特別設定
[m        只要記得
[m
[m        「如果你的動畫會要求使用者開別的程式同時運作，
[m          就把第一個 ^L 改成 ^LS 」
[m
[m        例如叫使用者開著 mp3 在旁邊播歌之類的
[m        基本上 ^LS 就只有這種時候才好用。
[m
[m        另外要注意是，正確的用法是只在同步開始點使用 ^LS。
[m        (一般動畫只要在開始的第一個使用就夠了) 後面應該使用 ^L
[m        而非 ^LS。這是因為一連串的 ^LS 就跟沒有用 ^LS 是一樣的。
[m
[m        也就是:
[m                ^LS0.5                  (同步開始)
[m                ^L0.1                   (這裡不該用 ^LS)
[m                ^L
[m                ...
[m        如果你寫成
[m                ^LS0.1
[m                ^LS0.2
[m                ^LS
[m        那多半是錯誤的，這跟完全沒有 ^LS 的效果一致。
[m
[m-----------------------------------------------------------------------------
[m
[m1.5 隱藏控制碼          (2007 新增)
[m
[m        [1m*[30;40m[m^L
[m
[m        INVISIBLE ESCAPE 隱藏控制碼
[m
[m        做好的動畫檔出現一堆 ^L 顯示在螢幕上總是討厭的事。
[m        想把它放在第二頁又不行，因為只有第一頁有出現 ^L 才能播放。
[m
[m        pmore 2007 有稍微修正這個問題，不再顯示第一頁的控制碼；
[m        但若想轉到其它 BBS 時，又會冒出一堆 ^L
[m
[m        於是，pmore 2007 支援前有 *[30;40m ANSI 碼的 ^L，
[m        (30;40 為黑底黑字)。
[m
[m        控制碼後面有沒有 *[m 不影響，不過多數人為了把顏色設回來
[m        應該都會加吧。
[m
[m        範例:
[m                *[30;40m^L2.5*[m
[m                *[30;40m^LP
[m
[m                (上面的 * 都是在 BBS 打入 ESC 控制碼的特殊字元)
[m
[m        另外為了與傳統 24 行動畫對齊開頭，最前面還可以再加個 ==
[m
[m        範例:
[m                ==*[30;40m^L2.5
[m                ==*[30;40m^LP*[m
[m
[m        註: 為了效能考量，目前只開放與上面一字不差的寫法。
[m        也就是說， 下列寫法都是錯誤的:
[m                *[0;30;40m^L            (前面多了 0;)
[m                *[30;40m ^L             (中間多了空白)
[m                *[37;47m^L              (37 47 不行)
[m                *[m*[30;40m^L           (前面多了 *[m)
[m                --*[30;40m^L            (目前只接受 == 不接受 --)
[m                =*[30;40m^L             (少一個 = 也不行)
[m                ==^L                    (很抱歉目前也不接受這種)
[m
[m        在實裝 pmore 2007 的系統上，編輯器通常會幫 ^L 行變色。
[m        如果你的 ^L 沒有變色，請檢查是不是多了還少了什麼。
[m
[m-----------------------------------------------------------------------------
[m
[m1.6 與傳統動畫相容      (2007 新增)
[m
[m        ^LO=
[m
[m        OLDMODE         傳統動畫
[m
[m        pmore 動畫系統目前仍然只有使用 pmore 的 BBS 站支援，
[m        也就是說當你選擇了這種動畫後，也暗示著動畫的不易流通。
[m
[m        為了解決這種遺憾，pmore 加入了隱藏控制碼 (見前章),
[m        這樣只要你在傳統動畫的23行分隔線處加入 pmore 控制碼，
[m        就可得到「有 pmore 會自動播放、非 pmore 仍可手動翻頁」
[m        的結果。
[m
[m        不幸的是，除非你每頁都加，不然 pmore 會直接跳到檔尾 -
[m        因為它找不到後面的 ^L。
[m
[m        ^LO= 就是解決這個問題的。 (是英文的大寫 O 而非數字 0)
[m        加了這行後等於幫使用者按了小寫 p (播放動畫)，而且可指定時間。
[m        適用於不想全篇改寫的舊動畫。
[m
[m        範例:
[m                ^LO=0.5
[m                以傳統模式播放，速度為每張 0.5 秒
[m
[m        與隱藏控制碼可混用，如:
[m
[m                ==*[30;40m^LO=0.5*[m
[m
[m        假設你已經作好了一個傳統的 24 行動畫，
[m        只要在第一行加入上面的碼， (後面全部一行都不用改！)
[m        它就會在 pmore 系統上有自動播放的效果
[m        (詢問使用者要不要播放、且會自動對齊第一行後再播放)
[m        在非 pmore 的外站上則與一般傳統動畫無異。
[m
[m=============================================================================
[m
[m2. 互動式動畫
[m
[m        pmore 2007 最大的特色就是加入了大量互動的指令，
[m        使得遊戲、多重結局的動畫都不再是夢想。
[m        某種程度而言，它也可以當成一個迷你的 BBS 程式發展平台。
[m
[m-----------------------------------------------------------------------------
[m
[m2.1 動畫編號方式
[m
[m        要談互動式的動畫製作前，有些觀念要先理解。
[m        一個互動式的動畫不外乎兩大重點:
[m
[m          1. 取得使用者的輸入
[m          2. 根據輸入作出不同反應。
[m
[m        取得輸入會在後面的章節介紹，現在先來談談怎樣作出「反應」。
[m
[m        目前的動畫系統，唯一的反應其實就是換畫面，也可說是「跳頁」。
[m        例如使用者按 1 就跳第 1 頁，按 2 就跳第二頁。
[m
[m        在 pmore 要換畫面，先要知道每一張畫面是怎麼編號的，還有怎麼指定
[m        跳頁的目標。
[m
[m        前面提過， pmore 動畫的每一張畫面都是從 ^L 開始的；
[m
[m        ^L
[m                畫面一
[m        ^L
[m                畫面二
[m        ^L
[m                畫面三
[m
[m        從檔案開始，第一個出現的 ^L 編號為 1, 可稱之為「畫面1」 (frame 1)
[m        要指定一個畫面，在 pmore 的語法簡寫中稱之為「cmd」 (command)
[m        一個 cmd 實際是由兩個部份構成的:
[m
[m                TypeOffset
[m
[m        Type 可以想成「單位」，Offset 可以想成「編號」。
[m
[m        Type (單位) 可直接指定畫面(frame)，或是頁數(page)、行數(line)
[m        、別名 (named，詳見 3.4 畫面命名)。
[m        每種單位的編號都是從 1 開始計算。
[m        Type 的語法就是各單位的英文縮寫: f, p, l。 (named 格式 為 :xxx:)
[m
[m        Offset 通常是一個數字。有正負號時代表它是「相對」的單位，
[m        無正負號時則是「絕對」的單位。
[m
[m        有點複雜嗎？ 直接來看例子吧:
[m
[m                f1      => frame 1   (第 1 張畫面)
[m                p+2     => page +2   (往後 2 頁)
[m                l-100   => line -100 (往前 100 行)
[m                :named: => named     (尋找叫作 named 的畫面, 詳見 3.4)
[m
[m        註: 由於播放時在跳頁後每頁還是會從 ^L 開始顯示 (新頁在 ^L 出現之前的
[m        內容不會顯示)，加上 page(頁)會受不同連線程式視窗大小的影響，所以一般
[m        還是建議以 frame 或 name 為單位。
[m
[m        常見錯誤:
[m                5       => 沒 type, 系統不知你是要指定哪種格式
[m                f0      => 0 沒有東西，編號由 1 開始。
[m
[m-----------------------------------------------------------------------------
[m
[m2.2 跳頁
[m
[m        ^LGcmd
[m
[m        GOTO            跳頁
[m
[m        最自然的練習，就是由直接跳頁開始了。
[m        跳頁(畫面)的指令叫 ^LG, 後面接個 cmd (參見 2.1 動畫編號方式)
[m        實際效果就是直接跳到該頁後繼續播放。
[m
[m        常見的應用是無限重播的區段。
[m        注意有跳頁指令時該頁本身不會顯示出來。
[m
[m        範例:
[m                ^LGf1           (跳到第一張畫面)
[m                ^LGf+3          (往後跳三張畫面)
[m
[m        實例:
[m                ^L0.5
[m                        畫面一
[m                ^L
[m                        畫面二
[m                ^LGf-2
[m                        畫面三
[m
[m                上面的指令會造成畫面不停的加互顯示「畫面一」「畫面二」
[m                但「畫面三」字樣不會出現。
[m
[m        註:     跳頁另外有些限制:
[m                - 無法跳到第一張畫面之前 (例: 在第 2 張畫面打 ^LGf-2 無效)
[m                - 無法跳到自己本身       (例: 在第 2 張畫面打 ^LGf2  無效)
[m                - 跳頁本身會花費一張畫面的最短播放時間 (目前為 0.1 秒)
[m                - 跳頁失敗時會視情況變成改顯示下張畫面或是停止播放
[m                - 跳頁失敗時請檢查 cmd 的 type 是否忘了寫，如 ^LG2
[m
[m-----------------------------------------------------------------------------
[m
[m2.3 互動選項
[m
[m        ^L#key,cmd,text#
[m
[m        OPTION          互動選項
[m
[m        互動式選項 ^L# 可說是是 pmore 2007 動畫系統最主要的核心了。
[m        它讓你的動畫可依使用者的輸入(key)進行不同的反應。
[m
[m        ^L# 的基本形可以拿來作 RPG-Like 的互動遊戲。
[m
[m        初看有點複雜，其實只要掌握兩個原則就好了:
[m
[m        1. 每一個選項用 # 包起來，也就是 ^L#選項1#選項2#選項3#
[m        2. 每個選項內的設定用逗號 (,) 分開，也就是 #設定1,設定2,設定3#
[m
[m        那麼，再來細看語法吧:
[m        ^L#key,cmd,text#
[m
[m        key:    使用者可按下的快捷鍵 (只能單鍵，如 1 2 3 a b A B ...)
[m        cmd:    被選取後要執行的動作 (就是跳頁，見 2.1 動畫編號方式)
[m        text:   顯示在螢幕上的說明   (可省略)
[m
[m        範例:
[m                ^L#a,f1,首頁#
[m                按下 a 時會跳到第一張畫面
[m
[m                ^L#b,f-1,前面#c,f+2,結束#
[m                按下 b 會跳往前一張畫面，按 c 則會往後兩張畫面
[m
[m        標準形式在螢幕的下方會照你的順序顯示一排選項列。
[m        這些選項可用方向鍵移動選取，也可用你指定的 key 當熱鍵按。
[m
[m        key, cmd, text 這三個要素，基本上只有 cmd 是必需的。
[m        (當然， key 跟 cmd 中間的分隔逗號也不能少)
[m
[m        key 省略時，系統會由前一個 key 來產生下個 key。
[m
[m                ^L#a,f1,這是a#,f2,這是b#1,f1,這是1#,f2,這是2#
[m                這例子中，省略的兩個分別會變成 b 跟 2。
[m
[m        text 省略時，系統不會出現選項列。請記得在你的動畫中提示
[m        使用者現在該作什麼事。
[m
[m                ^L#a,f1#,f2#,f3#,f4#
[m                按 a 跳第一張， b 跳 2, c 跳 3, d 跳 4
[m                而且沒有選項列
[m
[m        註: 選項列會不會出現實際上是看「第一個選項的 text」有沒有被省略。
[m            也就是說，
[m
[m            ^L#a,f1#,f2,看不到#    <- 這行一樣沒選項列。
[m            ^L#a,f1,有文字#,f2#    <- 這個有選項列，第 2 個選項會顯示熱鍵
[m
[m        註: ^L## 結尾要有對應的 # 包起來才行!
[m            常見錯誤:
[m
[m            ^L#a,f1,選項一#b,f2,選項二 <- 選項二無作用
[m
[m       註: ^L# 在執行時會依順序判斷按鍵是否符合條件。也就是說，
[m           若有熱鍵重複出現則是前面的會被執行。 適當排列並與特殊按鍵 (見 3.1)
[m           如 @a 合用則可作出「按 XX 鍵執行 YY，其它所有鍵都執行 ZZ」的效果。
[m
[m=============================================================================
[m
[m3. 即時互動與進階
[m
[m        下面講的是更高級的特殊指令及應用，
[m        主要是讓互動更進一步變為即時性的互動，
[m        例如「在某時使用者按下某鍵才會有反應」的效果。
[m
[m-----------------------------------------------------------------------------
[m
[m3.1 特殊按鍵與預設選項
[m
[m        @
[m
[m        NAMED KEY       特殊按鍵
[m
[m
